import collections
import copy

class Solution:
    def maxPoints(self, points) -> int:
        dic_counts = collections.defaultdict(int)
        dic_set = collections.defaultdict(set)
        max_steps = 0
        n = len(points)
        def check(start):
            nonlocal max_steps
            if start == n - 1:
                return
            p1 = points[start]

            for i in range(start + 1, n):
                p2 = points[i]
                if p2[0] - p1[0] != 0:
                    k = float((p2[1] - p1[1]) / (p2[0] - p1[0]))
                    b = (p1[1] * p2[0] - p2[1] * p1[0]) / (p2[0] - p1[0])
                else:
                    k = 't'
                    b = p1[0]
                if start in dic_set[(k, b)] and i in dic_set[(k, b)]:
                    continue
                dic_set[(k, b)].add(i)
                dic_set[(k, b)].add(start)
                dic_counts[(k, b)] += 1
                max_steps = max(max_steps, dic_counts[(k, b)])
            check(start + 1)
        check(0)
        return max_steps + 1
s = Solution()
points = [[7,3],[19,19],[-16,3],[13,17],[-18,1],[-18,-17],[13,-3],[3,7],[-11,12],[7,19],[19,-12],[20,-18],[-16,-15],[-10,-15],[-16,-18],[-14,-1],[18,10],[-13,8],[7,-5],[-4,-9],[-11,2],[-9,-9],[-5,-16],[10,14],[-3,4],[1,-20],[2,16],[0,14],[-14,5],[15,-11],[3,11],[11,-10],[-1,-7],[16,7],[1,-11],[-8,-3],[1,-6],[19,7],[3,6],[-1,-2],[7,-3],[-6,-8],[7,1],[-15,12],[-17,9],[19,-9],[1,0],[9,-10],[6,20],[-12,-4],[-16,-17],[14,3],[0,-1],[-18,9],[-15,15],[-3,-15],[-5,20],[15,-14],[9,-17],[10,-14],[-7,-11],[14,9],[1,-1],[15,12],[-5,-1],[-17,-5],[15,-2],[-12,11],[19,-18],[8,7],[-5,-3],[-17,-1],[-18,13],[15,-3],[4,18],[-14,-15],[15,8],[-18,-12],[-15,19],[-9,16],[-9,14],[-12,-14],[-2,-20],[-3,-13],[10,-7],[-2,-10],[9,10],[-1,7],[-17,-6],[-15,20],[5,-17],[6,-6],[-11,-8]]
#points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]
#points = [[-1,-7],[8,7],[-1,-2],[-14,-15],[1,0],[-16,-17],[0,-1],[-1,7]]
print(s.maxPoints(points))
